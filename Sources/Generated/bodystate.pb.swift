// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bodystate.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum BodyState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case plainBody // = 1
  case noBody // = 2
  case encodedBody // = 3
  case binaryBody // = 4
  case charsetMalformed // = 5

  init() {
    self = .plainBody
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .plainBody
    case 2: self = .noBody
    case 3: self = .encodedBody
    case 4: self = .binaryBody
    case 5: self = .charsetMalformed
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .plainBody: return 1
    case .noBody: return 2
    case .encodedBody: return 3
    case .binaryBody: return 4
    case .charsetMalformed: return 5
    }
  }

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension BodyState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PLAIN_BODY"),
    2: .same(proto: "NO_BODY"),
    3: .same(proto: "ENCODED_BODY"),
    4: .same(proto: "BINARY_BODY"),
    5: .same(proto: "CHARSET_MALFORMED"),
  ]
}
